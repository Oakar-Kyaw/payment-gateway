name: CICD

on: 
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs: 
  build: 
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login into Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/payment-service:latest
            ${{ secrets.DOCKER_USERNAME }}/payment-service:${{ github.sha }}

  deploy: 
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Store current version for auto-rollback
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Store current running version before deployment
            docker inspect payment-service --format='{{.Config.Image}}' > /tmp/payment-service-backup.txt 2>/dev/null || echo "No previous version"
            echo "🔄 Backup version stored: $(cat /tmp/payment-service-backup.txt 2>/dev/null || echo 'None')"

      - name: Deploy with Auto-Rollback
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "🚀 Starting deployment with auto-rollback..."
            
            # Clean up any existing temporary containers first
            echo "🧹 Cleaning up existing temporary containers..."
            docker stop payment-service-new 2>/dev/null || echo "No payment-service-new container to stop"
            docker rm payment-service-new 2>/dev/null || echo "No payment-service-new container to remove"
            
            # Pull new image
            echo "📥 Pulling latest Docker image..."
            if ! docker pull ${{ secrets.DOCKER_USERNAME }}/payment-service:latest; then
              echo "❌ Failed to pull new image!"
              exit 1
            fi
            
            # Stop current container (but don't remove yet)
            echo "⏹️  Stopping current container..."
            docker stop payment-service || echo "No existing container to stop"
            
            # Start new container with temporary name
            echo "🆕 Starting new container..."
            if ! docker run -d \
              -p 8000:8000 \
              --name payment-service-new \
              ${{ secrets.DOCKER_USERNAME }}/payment-service:latest; then
              echo "❌ Failed to start new container!"
              # Restart the old container if it exists
              if docker ps -a --filter name=payment-service --format "table {{.Names}}" | grep -q payment-service; then
                echo "🔄 Restarting old container..."
                docker start payment-service || echo "Failed to restart old container"
              fi
              exit 1
            fi
            
            # Wait for container to start
            echo "⏳ Waiting for container to start..."
            sleep 15
            
            # Health check with multiple attempts
            echo "🔍 Performing health check..."
            HEALTH_CHECK_PASSED=false
            for i in {1..5}; do
              echo "Attempt $i/5..."
              if curl -f -s http://localhost:8000/api/v1/health >/dev/null 2>&1; then
                echo "✅ Health check passed!"
                HEALTH_CHECK_PASSED=true
                break
              fi
              echo "❌ Health check failed, retrying in 10 seconds..."
              sleep 10
            done
            
            if [ "$HEALTH_CHECK_PASSED" = true ]; then
              echo "🎉 Deployment successful! Switching containers..."
              # Remove old container and rename new one
              docker rm -f payment-service || echo "No old container to remove"
              docker rename payment-service-new payment-service
              echo "✅ Deployment completed successfully!"
              echo "📋 New version: ${{ github.sha }}"
            else
              echo "🚨 AUTO-ROLLBACK INITIATED!"
              echo "❌ Health check failed after 5 attempts"
              
              # Stop and remove failed container
              docker stop payment-service-new 2>/dev/null || echo "Container already stopped"
              docker rm payment-service-new 2>/dev/null || echo "Container already removed"
              
              # Check if we have a backup version to restore
              if [ -f /tmp/payment-service-backup.txt ]; then
                BACKUP_VERSION=$(cat /tmp/payment-service-backup.txt)
                if [ "$BACKUP_VERSION" != "No previous version" ] && [ -n "$BACKUP_VERSION" ]; then
                  echo "🔄 Restoring backup version: $BACKUP_VERSION"
                  
                  # Start backup version
                  if docker run -d \
                    -p 8000:8000 \
                    --name payment-service \
                    $BACKUP_VERSION; then
                    
                    # Quick health check on backup
                    sleep 10
                    if curl -f -s http://localhost:8000/api/v1/health >/dev/null 2>&1; then
                      echo "✅ Auto-rollback successful!"
                      echo "🔄 Restored to previous version: $BACKUP_VERSION"
                    else
                      echo "❌ Auto-rollback health check failed! Manual intervention required!"
                      exit 1
                    fi
                  else
                    echo "❌ Failed to start backup version! Manual intervention required!"
                    exit 1
                  fi
                else
                  echo "❌ No valid backup version found! Manual intervention required!"
                  exit 1
                fi
              else
                echo "❌ No backup version found! Manual intervention required!"
                exit 1
              fi
            fi

      - name: Deployment Status
        if: success()
        run: |
          echo "🎉 Pipeline completed successfully!"
          echo "📋 Status: Deployment successful or auto-rollback completed"

      - name: Deployment Failed
        if: failure()
        run: |
          echo "💥 Pipeline failed!"
          echo "🚨 Check the logs above for auto-rollback status"
          echo "⚠️  Manual intervention may be required"